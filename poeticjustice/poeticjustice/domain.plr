PYAELLAC:
    DeclBase: PyaellaSQLAlchemyBase
    MetaCls: PyaellaDataModelMetaclass
    ReflMetaCls: PyaellaReflectiveModelMetaclass
    ReflCls: PyaellaReflectiveModelMetaclass
    SuperCls: PyaellaDataModel

(ApplicationDomain):

    Fields:
        id: Column(BigInteger, 
                Sequence('application_domains_id_seq', start=22220), 
                CheckConstraint('id<2468024680246802'), 
                server_default=text("nextval('application_domains_id_seq')"), 
                primary_key=True)
        name: Column(String(64), unique=True, nullable=True)
    Options:
        - add_tr_standard_mod.sql.mako

    Doc: |

        An ApplicationDomain defines an arbitrary boundry or demarcation based
        on business application and/or notions respective to corporate or conglomerate 
        entities. This does not specifically mean a 'domain name' but a unique identifier
        like a domain name is perfectly acceptable.

        An ApplicationDomain could span multiple servers, `clouds`, or any related topography.

        Basic premise:

            It may be best to use ApplicationDomain as a way to `white label`
            or segment a database or a cluster for companies, domains.

            An ApplicationDomain has to be unique within each instatianated
            Pyaella subdomain. Meaning... the name of an ApplicationDomain 
            has to be unique in the database.


(Application):

    Fields:
        id: Column(Integer, 
                Sequence('applications_id_seq', start=1601), 
                CheckConstraint('id<2600'), 
                server_default=text("nextval('applications_id_seq')"), 
                primary_key=True)
        name: Column(String(64), unique=True, nullable=True)
        key_sequence: Column(String(36))
    Relations:
        application_domain_id: Column(BigInteger, ForeignKey('application_domains.id'))
    Rules:
        Unique: [id, application_domain_id]
    Options:
        - add_tr_standard_mod.sql.mako

    Doc: |

        An Application is an application or web-app associated 
        to an ApplicationDomain.


(Group):
    Fields:
        name: Column(String(32), nullable=False)
        description: Column(String(64), nullable=False)
        display_name: Column(String(64), nullable=False)
    Rules:
        Unique: [name, application_group_type_id]
    Relations:
        application_group_type_id: Column(Integer, ForeignKey('application_group_type_lu.id'))
    Options:
        - add_tr_standard_mod.sql.mako

    Doc: |

        The Group model defines names of Role Based Access Control, at a 'higher'
        level than a User Type as defined by UserTypeLookup. A Group is considered
        System or Database lever RBAC, such as 'SuperUser', 'Editor', 'Viewer', and 
        can be applied to C.R.U.D in a UI of an application.

(ApplicationGroupTypeLookup):
    Fields:
        name: Column(String(32), unique=True, nullable=False)
        display_name: Column(String(64), unique=True)
        description: Column(String(64), nullable=False)
    Values:
        name: [
            mividio_rs,
            mividio_personal
        ]
        display_name: [
            Real Estate,
            Personal
        ]
        description: [
            Real Estate Mividio Application,
            Personal Mividio Application
        ]
    Rules:
        Unique: [name]
    Options:
        - add_tr_standard_lu_mod.sql.mako

    Doc: |

        An ApplicationGroupTypeLookup model is a LookupTable that defines
        types of application groups, a high-level segmentation of usage


(UserXGroup):
    Relations:
        user_id: Column(BigInteger, ForeignKey('users.id'))
        group_id: Column(Integer, ForeignKey('groups.id'))
    Rules:
        Unique: [user_id, group_id]
    Options:
        - add_tr_standard_mod.sql.mako

    Doc: |

        An Association model for User and Group... ie. Which User is
        a member of which Group.


(UserTypeLookup):
    Fields:
        name: Column(String(32), unique=True, nullable=False)
        display_name: Column(String(64), unique=True)
        description: Column(String(64), nullable=False)
    Values:
        name: [
            sys,
            player
        ]
        display_name: [
            SuperUser,
            Player
        ]
        description: [
            System Administrator,
            Player
        ]
    Rules:
        Unique: [name]
    Options:
        - add_tr_standard_lu_mod.sql.mako


(UserXUserTypeLookup):
    Relations:
        user_id: Column(BigInteger, ForeignKey('users.id'), primary_key=True)
        user_type_id: Column(Integer, ForeignKey('user_type_lu.id'), primary_key=True)
    Rules:
        Unique: [user_id, user_type_id]
    Options:
        - add_tr_standard_mod.sql.mako


(User):
    Fields:
        id: Column(BigInteger, 
                Sequence('users_id_seq', start=11111), 
                CheckConstraint('id<111111111111'), 
                server_default=text("nextval('users_id_seq')"), 
                primary_key=True)
        user_name: Column(String(15), nullable=False)
        email_address: Column(String(255), nullable=False, unique=True)
        twitter_name: Column(String(255))
        facebook_name: Column(String(255))
        password: Column(String(128), 
            CheckConstraint('"char_length"(password)>8'), nullable=False)
        is_active: Column(Boolean, default=True, nullable=False)
        is_invited: Column(Boolean, default=False, nullable=False)
        subnational: Column(String(255))
        country_code: Column(String(3), nullable=False)
        mobile_number: Column(String(15))
        access_token: Column(String(128))
        auth_hash: Column(String)
        device_rec: Column(Text)
        profile_pic: Column(String)
        user_prefs: Column(Text)
        user_score: Column(Integer, default=0, nullable=False)
        num_of_verses: Column(Integer, default=0, nullable=False)
        num_of_lines: Column(Integer, default=0, nullable=False)
        allow_public_listing: Column(Boolean, default=True)
        open_verse_ids: Column(ARRAY(Integer))
        level: Column(Integer, default=1, nullable=False)
    Relations:
        user_types: relationship('UserXUserTypeLookup')
    Rules:
        Unique: [user_name, email_address]
    EntityMixes: [
        poeticjustice.mixes.UserMix
    ]
    Options:
        - add_tr_standard_mod.sql.mako


(UserXUser):
    Relations:
        user_id: Column(BigInteger, ForeignKey('users.id'), primary_key=True)
        friend_id: Column(BigInteger, ForeignKey('users.id'), primary_key=True)
        approved : Column(Boolean, default=False, nullable=False)


(VerseCategoryTypeLookup):
    Fields:
        name: Column(String(32), unique=True, nullable=False)
        display_name: Column(String(64), unique=True)
        description: Column(String(64), nullable=False)
    Values:
        name: [
            misc,
            sports,
            games,
            entertainment,
            school,
            food,
            science,
            nature,
            seasonal
        ]
        display_name: [
            Misc,
            Sports,
            Games,
            Entertainment,
            School,
            Food,
            Science,
            Nature,
            Seasonal
        ]
        description: [
            Misc,
            Sports,
            Games,
            Entertainment,
            School,
            Food,
            Science,
            Nature,
            Seasonal
        ]


(VerseCategoryTopic):
    Fields:
        name: Column(String(64), nullable=False)
        min_points_req: Column(Integer, default=0, nullable=False)
        score_modifier: Column(Integer, default=1, nullable=False)
        main_icon_name: Column(String(32))
    Relations:
        verse_category_type_id: Column(Integer, ForeignKey('verse_category_type_lu.id'))
    Rules:
        Unique: [name, verse_category_type_id]
    Options:
        - add_tr_standard_mod.sql.mako


(Verse):
    Fields:
        id: Column(BigInteger, 
                    Sequence('verse_id_seq', start=1),  
                    server_default=text("nextval('verse_id_seq')"), 
                    primary_key=True)
        title: Column(String, nullable=True)
        user_ids: Column(ARRAY(Integer), nullable=False)
        max_participants: Column(Integer, nullable=False, default=2)
        participant_count: Column(Integer, nullable=False, default=1)
        max_lines: Column(Integer, nullable=False, default=8)
        friends_only: Column(Boolean, nullable=False, default=False)
        complete: Column(Boolean, nullable=False, default=False)
    Relations:
        verse_category_topic_id: Column(Integer, ForeignKey('verse_category_topics.id'), nullable=False)
        owner_id: Column(Integer, ForeignKey('users.id'), nullable=False)
        current_user_id: Column(BigInteger, ForeignKey('users.id'), nullable=True)
        next_index_user_ids: Column(Integer, default=0, nullable=False)
    Values:
        next_index_user_ids: [
            0,
            1,
            2,
            3,
            4
        ]


(LineXVerse):
    Fields:
        id: Column(BigInteger, 
                    Sequence('line_id_seq', start=1),  
                    server_default=text("nextval('line_id_seq')"), 
                    primary_key=True)
        line_text: Column(String)
        line_score: Column(Integer)
        added: Column(Boolean, default=False, nullable=False)
        user_level: Column(Integer, default=1, nullable=False)
    Relations:
        user_id: Column(BigInteger, ForeignKey('users.id'), nullable=False)
        verse_id: Column(BigInteger, ForeignKey('verses.id'), nullable=False)


(UserVerseHistory):
    Fields:
        id: Column(BigInteger, 
                    Sequence('user_verse_history_id_seq', start=1),  
                    server_default=text("nextval('user_verse_history_id_seq')"), 
                    primary_key=True)
        verse_id: Column(Integer)
        owner_id: Column(Integer)
        player_id: Column(Integer)
        topic_id: Column(Integer)
        title: Column(String)
        lines_record: Column(Text)
        players_record: Column(Text)
    Options:
        - add_tr_standard_mod.sql.mako


AFTER_CREATE_SQL:
    Literal: |


        INSERT INTO groups
            (
                name, description, display_name
            )
        VALUES
            ('su', 'Super user role with access to all application data and logic', 'Super User'),
            ('admin', 'Role allowed to admin application business logic', 'Administrator'),
            ('editor', 'Role allowed to edit data', 'Editor'),
            ('user', 'Role allowed to view data', 'User');


        INSERT INTO users
            (
                email_address, country_code, password, user_score, num_of_verses, num_of_lines, is_active, is_invited, access_token, user_name, level, open_verse_ids
            )
        VALUES
            ('larry@miga.me', 'USA', '1751aa189503994bd6c6d6ed3118e33c2981d2587980ab223750f52b509abd3a9efccf51eed53905c424424d1f5fdbf17316d2d4b5f30d8063be4f315c210729', 0, 0, 0, True, False,'1751aa189503994bd6c6d6ed3118e33c2981d2587980ab223750f52b509abd3a9efccf51eed53905c424424d1f5fdbf17316d2d4b5f30d8063be4f315c210727', 'me', 1, ARRAY[1,4,5]),
            ('larry+friend1@miga.me', 'USA', '1751aa189503994bd6c6d6ed3118e33c2981d2587980ab223750f52b509abd3a9efccf51eed53905c424424d1f5fdbf17316d2d4b5f30d8063be4f315c210729', 0, 0, 0, True, True, '1751aa189503994bd6c6d6ed3118e33c2981d2587980ab223750f52b509abd3a9efccf51eed53905c424424d1f5fdbf17316d2d4b5f30d8063be4f315c210728', 'friend 1 open', 1, ARRAY[3]),
            ('larry+friend2@miga.me', 'USA', '1751aa189503994bd6c6d6ed3118e33c2981d2587980ab223750f52b509abd3a9efccf51eed53905c424424d1f5fdbf17316d2d4b5f30d8063be4f315c210729', 0, 0, 0, True, True, '1751aa189503994bd6c6d6ed3118e33c2981d2587980ab223750f52b509abd3a9efccf51eed53905c424424d1f5fdbf17316d2d4b5f30d8063be4f315c210728', 'friend 2 joined', 1, ARRAY[4]),
            ('larry+world1@miga.me', 'USA', '1751aa189503994bd6c6d6ed3118e33c2981d2587980ab223750f52b509abd3a9efccf51eed53905c424424d1f5fdbf17316d2d4b5f30d8063be4f315c210729', 0, 0, 0, True, True, '1751aa189503994bd6c6d6ed3118e33c2981d2587980ab223750f52b509abd3a9efccf51eed53905c424424d1f5fdbf17316d2d4b5f30d8063be4f315c210729', 'world 1 open', 1, ARRAY[2]),
            ('larry+world2@miga.me', 'USA', '1751aa189503994bd6c6d6ed3118e33c2981d2587980ab223750f52b509abd3a9efccf51eed53905c424424d1f5fdbf17316d2d4b5f30d8063be4f315c210729', 0, 0, 0, True, True, '1751aa189503994bd6c6d6ed3118e33c2981d2587980ab223750f52b509abd3a9efccf51eed53905c424424d1f5fdbf17316d2d4b5f30d8063be4f315c210729', 'world 2 joined', 1, ARRAY[5]);


        INSERT INTO user_x_user_type_lu
            (user_id, user_type_id)
        VALUES
            (11111, 2),
            (11112, 2),
            (11113, 2),
            (11114, 2),
            (11115, 2);

        INSERT INTO user_x_users
            (user_id, friend_id, approved)
        VALUES
            (11111, 11112, true),
            (11111, 11113, true);
            -- TODO: need open friend requests

        INSERT INTO user_x_groups
            (user_id, group_id)
        VALUES
            (11111, 1),
            (11112, 1),
            (11113, 1),
            (11114, 1),
            (11115, 1);

        INSERT INTO verse_category_topics 
            (
                name, min_points_req, score_modifier, main_icon_name, verse_category_type_id
            )
        VALUES
            ('Love', 0, 1, 'Heart.png', 1),
            ('Trouble', 0, 1, 'Skull.png', 1),
            ('70s', 0, 1, 'Oil-Lamp.png', 1),

            ('NFL', 0, 1, 'American-Football.png', 2),
            ('Baseball', 16, 1, 'Baseball-Helmet.png', 2),
            ('Tennis', 48, 1, 'Tennis-Ball.png', 2),
            ('Soccer', 96, 2, 'Pitch.png', 2),
            ('Rugby', 144, 3, 'Football-Goal.png', 2),
            ('Biking', 0, 1, 'Bike.png', 2),
            ('Skating', 0, 1, 'Skateboard.png', 2),
            ('NFL vs Rugby', 0, 2, 'Conversation.png', 2),

            ('Video Games', 0, 1, 'Game-Pad.png', 3),
            ('Vintage Games', 16, 1, 'Vintage-Handheld.png', 3),
            ('Arcade Games', 48, 1, 'Ghost.png', 3),
            ('Board Games', 96, 2, 'Dice.png', 3),
            ('Fantasy Games', 144, 3, 'Castle.png', 3),
            ('PC vs Console', 0, 2, 'Conversation.png', 3),

            ('Movies', 0, 1, 'Clapper-Board.png', 4),
            ('Television', 0, 1, 'Tv-Set.png', 4),
            ('Celebrities', 0, 1, 'Star.png', 4),
            ('Vintage', 0, 1, 'Record.png', 4),
            ('Radio', 0, 1, 'Radio.png', 4),
            ('70s and 80s', 0, 1, 'Cassette.png', 4),
            ('Hip Hop', 0, 1, 'Ghetto-Blaster.png', 4),
            ('Divas and Crooners', 0, 1, 'Microphone.png', 4),
            ('Electronic', 0, 1, 'Synth.png', 4),
            ('Country', 0, 1, 'Acoustic-Guitar.png', 4),
            ('Rock', 0, 1, 'Amp.png', 4),

            ('Graduation', 0, 1, 'Graduation-Cap.png', 5),
            ('Band', 0, 1, 'Trumpet.png', 5),
            ('Class', 0, 1, 'Desk.png', 5),
            ('Homework', 0, 1, 'Paper.png', 5),
            ('Tests', 0, 1, 'Pad-&-Pencil.png', 5),
            ('Drivers Ed', 0, 1, 'Traffic-cone.png', 5),
            ('Lunch Lady', 0, 1, 'Chefs-Hat.png', 5),
            ('Professor', 0, 1, 'Spectacles.png', 5),
            ('English', 0, 1, 'Book.png', 5),
            ('Math', 0, 1, 'Calculator.png', 5),
            ('Biology', 0, 1, 'Monkey.png', 5),
            ('Chemistry', 0, 1, 'Flask.png', 5),

            ('Breakfast', 0, 1, 'Egg.png', 6),
            ('Fast Food', 0, 1, 'Fries.png', 6),
            ('Sushi', 0, 1, 'Sushi.png', 6),
            ('Sweets', 0, 1, 'Ice-Lolly.png', 6),
            ('Dinner', 0, 1, 'Steak.png', 6),
            ('Noodles', 0, 1, 'Noodles.png', 6),
            ('Fruit', 0, 1, 'Apple.png', 6),
            ('Pints', 0, 1, 'Pint.png', 6),

            ('Rocket', 0, 1, 'Rocket.png', 7),
            ('Inventions', 0, 1, 'Bulb.png', 7),
            ('Space', 0, 1, 'Shuttle.png', 7),
            ('UFOs', 0, 1, 'UFO.png', 7),

            ('Earth', 0, 1, 'Earth.png', 8),
            ('Flowers', 0, 1, 'Flower.png', 8),
            ('Rain', 0, 1, 'Light-Showers.png', 8),
            ('Trees', 0, 1, 'Pine-Tree.png', 8),
            ('Rainbows', 0, 1, 'Rainbow.png', 8),
            ('Storms', 0, 1, 'Storm.png', 8),
            
            ('Campfire', 0, 1, 'Flame.png', 9),
            ('Vacation Photos', 0, 1, 'Photo.png', 9),
            ('Sunglasses', 0, 1, 'Shades.png', 9),
            ('Seaside', 0, 1, 'Light-house.png', 9),
            ('Picnics', 0, 1, 'Melon.png', 9),
            ('Boating', 0, 1, 'Anchor.png', 9);


         INSERT INTO verses
            (
                user_ids, participant_count, max_participants, max_lines, owner_id, verse_category_topic_id, friends_only, complete, next_index_user_ids, title
            )
        VALUES
            (ARRAY[11111, -1], 1, 2, 8, 11111, 1, True, False, 0, 'My Verse'), -- my verse
            (ARRAY[11114, -1, -1], 1, 3, 12, 11114, 2, False, False, 0, 'Open W 3 People'), -- open world verse
            (ARRAY[11112, -1, -1, -1], 1, 4, 16, 11112, 3, True, False, 0, 'Open F 4 People'), -- open friend verse
            (ARRAY[11113, 11111, -1, -1, -1], 2, 5, 20, 11113, 4, True, False, 1, 'Joined F 5 People'), -- joined friend verse
            (ARRAY[11115, 11111], 2, 2, 8, 11115, 5, False, False, 0, 'Joined W 5 People'); -- joined world verse


        INSERT INTO line_x_verses
        (
            user_id, verse_id, line_text, line_score, added, user_level
        )
        VALUES
            (11113, 4, 'Im the friend owner, now you joined, so write a line', 0, false, 1);

